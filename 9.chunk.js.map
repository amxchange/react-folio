{"version":3,"file":"9.chunk.js","mappings":"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","sources":["webpack://amx-ui-components/./src/d-app/modules/utils/ContentWrapper.jsx","webpack://amx-ui-components/./src/shared/services/ApiService.js"],"sourcesContent":["import React from \"react\";\nimport { Container } from \"reactstrap\";\n\nconst ContentWrapper = (props) => {\n    return (\n        <>\n            {/* content header */}\n            <div className=\"header bg-gradient-info pb-8 pt-5 pt-md-8\">\n                <Container fluid>\n                    <div className=\"header-body\">\n                        {props.contentHeader}\n                    </div>\n                </Container>\n            </div>\n            {/* content body */}\n            <Container className=\"mt--7\" fluid style={{ minHeight: \"519px\" }}>\n                {props.children}\n            </Container>\n        </>\n    );\n};\n\nexport default ContentWrapper;\n","import axios from \"axios\";\nimport { serializeParams } from \"@shared/utils\";\n\nexport class ApiService {\n    constructor({ prefix = \"\", responseBuilder = res => res } = {}) {\n        this.prefix = prefix;\n        this.responseBuilder = responseBuilder;\n        this.initInterceptors();\n    }\n\n    get = (url, data, options) => this.request({ url, method: \"get\", data, options });\n\n    post = (url, data, options) => this.request({ url, method: \"post\", data, options });\n\n    put = (url, data, options) => this.request({ url, method: \"put\", data, options });\n\n    delete = (url, data, options) => this.request({ url, method: \"delete\", data, options });\n\n    postFormData = (url, data, options) => {\n        data = serializeParams(data);\n        return this.post(url, data, {\n            ...options,\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                ...options.headers\n            }\n        });\n    };\n\n    request = async ({ url, method, data, options = {} }) => {\n        url = this.getUrl({ url, options });\n        let axiosArgs = this.getAxiosArgs({ url, method, data, options });\n        try {\n            let response = await axios.request(axiosArgs);\n            if (\n                response.status !== 200\n                // || (response.data.statusKey !== \"SUCCESS\" && !(response.data instanceof Blob))\n            ) {\n                console.log(\n                    `%c ApiService request: ${url} (${method}) status non success: ${response}`,\n                    \"background: #701414; color: #bada55\"\n                );\n                console.log(`%c throwing`, \"background: #701414; color: #bada55\");\n                throw response;\n            }\n            return this.responseBuilder(response);\n        } catch (thrown) {\n            if (axios.isCancel(thrown)) {\n                console.log(\"Request canceled\", thrown.message);\n            } else {\n                if (\n                    false // add condition for need of custom interceptor in case of failure\n                ) {\n                    let interceptorResp = await this.errorResponseInterceptor({\n                        method,\n                        url,\n                        axiosArgs,\n                        response: thrown.response\n                    });\n                    return this.responseBuilder(interceptorResp);\n                }\n                console.log(\n                    `%c ApiService request: ${url} (${method}) catch: ${thrown.response}`,\n                    \"background: #701414; color: #bada55\"\n                );\n            }\n            throw thrown;\n        }\n    };\n\n    initInterceptors() {\n        axios.interceptors.response.use(\n            async response => {\n                this.checkDownload(response);\n                return Promise.resolve(response);\n            },\n            error => {\n                if (axios.isCancel(error)) {\n                    console.log(\"Request canceled\", error.message);\n                } else {\n                    let errorData = error.response.data;\n                    let errorMessages = [errorData.message, errorData.messageKey, errorData.error, errorData.errorKey];\n                    error.errorMsg = errorMessages.find(v => !!v);\n                    if (error.request.responseType === \"blob\") {\n                        let reader = new FileReader();\n                        reader.onload = function () {\n                            let errResp = jsonutil.parse(reader.result);\n                            if (errResp.message) ToastUtil.error(errResp.message);\n                        };\n                        reader.readAsText(error.response.data);\n                    }\n                }\n\n                return Promise.reject(error);\n            }\n        );\n    }\n\n    errorResponseInterceptor = ({ url, method, axiosArgs, response }) => {\n        return new Promise.resolve();\n    };\n\n    checkDownload = resp => {\n        if (!resp || !resp.headers[\"content-disposition\"]) return;\n        let suppressDownload = resp.config.headers[\"suppress-download\"];\n        let fileName = (resp.headers[\"content-disposition\"] || \"attachment; filename=table.pdf\")\n            .split(\" \")[1]\n            .split(\"=\")[1];\n        const url = this.getUrlFromBlob(resp.data);\n        if (suppressDownload) return url;\n        const link = document.createElement(\"a\");\n        link.href = url;\n        link.setAttribute(\"download\", fileName);\n        document.body.appendChild(link);\n        link.click();\n    };\n\n    getUrlFromBlob = data => {\n        return window.URL.createObjectURL(new Blob([data]));\n    };\n\n    getUrl = ({ url, options = {} }) => {\n        let result = \"\";\n        let urlType =\n            options && options.urlType && typeof options.urlType === \"string\" ? options.urlType.toLowerCase() : \"\";\n        switch (urlType) {\n            case \"absolute\":\n                result = url;\n                break;\n            case \"relative\":\n                result = this.prefix + url;\n                break;\n            default:\n                result = this.prefix + url;\n        }\n        return result;\n    };\n\n    getAxiosArgs = ({ url, method, data, options = {} }) => {\n        let _options = {\n            ...options,\n            headers: {\n                Accept: \"application/json\",\n                ...options.headers\n            }\n        };\n        let axiosArgs = {\n            url,\n            method,\n            responseType: _options.responseType,\n            headers: _options.headers,\n            cancelToken: _options.cancelToken\n        };\n        switch (method) {\n            case \"get\":\n                axiosArgs = { ...axiosArgs, params: data };\n                break;\n            case \"post\":\n            case \"put\":\n            case \"delete\":\n                axiosArgs = { ...axiosArgs, data, params: _options.params };\n                break;\n            default:\n                break;\n        }\n        return axiosArgs;\n    };\n}\n\nexport const Api = {\n    root: new ApiService({\n        prefix: (window.CONST?.remoteServerUrl || \"\") + \"/api/v1\",\n        responseBuilder: res => res.data\n    })\n};\n"],"names":["props","className","fluid","contentHeader","style","minHeight","children","i","Api","root","prefix","responseBuilder","res","url","data","options","request","method","serializeParams","post","headers","getUrl","axiosArgs","getAxiosArgs","axios","response","status","console","log","message","interceptorResp","Promise","resolve","resp","suppressDownload","config","fileName","split","getUrlFromBlob","link","document","createElement","href","setAttribute","body","appendChild","click","window","URL","createObjectURL","Blob","urlType","toLowerCase","_options","Accept","responseType","cancelToken","params","this","initInterceptors","checkDownload","error","errorData","errorMessages","messageKey","errorKey","errorMsg","find","v","reader","FileReader","onload","errResp","jsonutil","parse","result","ToastUtil","readAsText","reject","CONST","remoteServerUrl"],"sourceRoot":""}