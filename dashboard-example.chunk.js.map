{"version":3,"file":"dashboard-example.chunk.js","mappings":";wyBACA,ihPAoD6BA,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,KAjBb,SAACC,EAAOC,GAC5B,MAAO,CACHC,iBAAkBF,EAAME,qBAIL,SAACC,EAAUF,GAClC,MAAO,CACHG,QAAS,SAAAC,GAAO,OAAIF,GAASC,EAAAA,EAAAA,IAAQC,UAjC3B,SAAAC,GAAS,62BAEX,IAFW,uBAUJ,WAAyC,6DAAP,GAC7C,OADoD,EAAtCC,QAAsC,EAAxBC,QACrB,IAAIC,QAAJ,6BAAY,WAAOC,EAASC,GAAhB,iEACf,IACID,EAAQ,QACV,MAAOE,GACLD,EAAOC,GAJI,2CAAZ,4DAXQ,qCAoBnB,WACI,OAAO,gBAACN,EAAD,KAAeO,KAAKC,MAAWD,KAAKb,MAApC,CAA2Ce,YAAa,IAAKC,aAAcH,KAAKG,yFArBxE,GACTC,EAAAA,cADlB,eC6CA,SAAeC,EAAAA,EAAAA,KAxCI,SAAAJ,GACf,ICVF,EAAOK,EAAOC,MDUNL,MCVkBM,EAAAA,EAAAA,UAASC,OAAOC,cAA1C,EAAOJ,GAAP,m0BAAcC,EAAd,MAEAI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,SAACC,GACfN,EAASM,EAAMC,OAAOJ,aAKxB,OAFAD,OAAOM,iBAAiB,SAAUH,GAE3B,WACLH,OAAOO,oBAAoB,SAAUJ,MAEtC,IAEIN,GDHL,OACI,uBAAKW,MAAO,CAAEC,UAAW,SAAUC,WAAY,YAC3C,0BACIC,QAAS,WACLnB,EAAMoB,QAAQC,KAAKC,EAAAA,KAEvBC,UAAQ,GAJZ,mBAQA,6CACA,2CAAmBtB,GACnB,0BACIkB,QAAS,WACLK,EAAAA,EAAAA,QAAqB,mBAAoB,CACrCC,KAAM,CAAEC,KAAM,uBAAwBC,WAAW,GACjDC,UAAWC,EAAAA,EACXC,OAAQ,CACJC,UAAW,WACPP,EAAAA,EAAAA,QAAqB,mBAAoB,UAP7D,iBAeA,0BACIL,QAAS,WACLnB,EAAMoB,QAAQC,KAAd,UAAsBW,EAAAA,GAAtB,uBAFR,qBAgBa7B,EAAAA","sources":["webpack://amx-ui-components/./src/shared/modules/Dashboard-Example/dashboard.hoc.jsx","webpack://amx-ui-components/./src/d-app/modules/Dashboard-Example/index.jsx","webpack://amx-ui-components/./src/shared/modules/Dashboard-Example/dashboard.hooks.js"],"sourcesContent":["/**\n * EXAMPLE FILE\n */\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useScreenWidth } from \"./dashboard.hooks\";\nimport { setMeta } from \"./dashboard.redux\";\n\nconst Dashboard = Component =>\n    class extends React.Component {\n        state = {};\n\n        /**\n         * @description: Dummy auth func.\n         * @param {object} request\n         * @param {object} options\n         * @return {Promise}\n         */\n        authenticate = ({ request = {}, options = {} } = {}) => {\n            return new Promise(async (resolve, reject) => {\n                try {\n                    resolve(\"data\");\n                } catch (error) {\n                    reject(error);\n                }\n            });\n        };\n\n        render() {\n            return <Component {...this.props} {...this.state} screenWidth={999} authenticate={this.authenticate} />;\n        }\n    };\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        dashboardExample: state.dashboardExample\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        setMeta: payload => dispatch(setMeta(payload))\n    };\n};\n\n/**\n * @description:\n * Standard hoc example for class based components.\n * Note - prefer to connect to your global state from hoc and keep your components light and clean.\n */\nexport const withDashboard = compose(connect(mapStateToProps, mapDispatchToProps), Dashboard);\n\n/**\n * @description:\n * Workaround to use custom hooks in your class based components.\n * Simply create a hoc that accepts a Component and returns a new Component with hooks in action.\n * Note - prefer to connect to your global state from hoc and keep your components light and clean.\n */\nexport const withDashboardHooks = Component =>\n    (props) => {\n        const meta = useSelector(state => state.dashboardExample.meta);\n        const screenWidth = useScreenWidth();\n        return (\n            <Component\n                screenWidth={screenWidth}\n                meta={meta}\n                {...props}\n            />\n        );\n    };\n","/**\n * EXAMPLE FILE\n */\n\nimport React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nimport EventService from \"@shared/services/EventService\";\nimport TypicalPopup from \"@shared/modules/utils/TypicalPopup\";\nimport { withDashboard, withDashboardHooks } from \"@shared/modules/Dashboard-Example/dashboard.hoc\";\nimport { useScreenWidth } from \"@shared/modules/Dashboard-Example/dashboard.hooks\";\nimport { mAppUrlPrefix, dAppUrlPrefix } from \"@shared/constants\";\n\n/**\n * Function Component\n */\nconst DashboardF = props => {\n    const screenWidth = useScreenWidth();\n    return (\n        <div style={{ textAlign: \"center\", background: \"#8fbc8f\" }}>\n            <button\n                onClick={() => {\n                    props.history.push(mAppUrlPrefix);\n                }}\n                disabled\n            >\n                switch to M-app\n            </button>\n            <h1>D-app Dashboard</h1>\n            <p>screen width - {screenWidth}</p>\n            <button\n                onClick={() => {\n                    EventService.publish(\"globalModal.show\", {\n                        data: { text: \"D Login confirmation\", noButtons: true },\n                        component: TypicalPopup,\n                        events: {\n                            onClickNo: () => {\n                                EventService.publish(\"globalModal.hide\", {});\n                            }\n                        }\n                    });\n                }}\n            >\n                go to details\n            </button>\n            <button\n                onClick={() => {\n                    props.history.push(`${dAppUrlPrefix}/counter-example`);\n                }}\n            >\n                go to counter\n            </button>\n        </div>\n    );\n};\n\nexport default withRouter(DashboardF);\n\n/**\n * Class Component\n */\nclass DashboardC extends React.Component {\n    render() {\n        return (\n            <div style={{ textAlign: \"center\", background: \"#8fbc8f\" }}>\n                <button\n                    onClick={() => {\n                        this.props.history.push(`/m`);\n                    }}\n                >\n                    switch to M-app\n                </button>\n                <h1>D-app Dashboard</h1>\n                <p>screen width - {this.props.screenWidth}</p>\n                <button\n                    onClick={() => {\n                        EventService.publish(\"globalModal.show\", {\n                            data: { text: \"D Login confirmation\", noButtons: true },\n                            component: TypicalPopup,\n                            events: {\n                                onClickNo: () => {\n                                    EventService.publish(\"globalModal.hide\", {});\n                                }\n                            }\n                        });\n                    }}\n                >\n                    go to details\n                </button>\n                <button\n                    onClick={() => {\n                        this.props.history.push(`/d/counter`);\n                    }}\n                >\n                    go to counter\n                </button>\n            </div>\n        );\n    }\n}\n// export default withRouter(withDashboard(DashboardC));\n// export default withRouter(withDashboardHooks(DashboardC));\n","/**\n * EXAMPLE FILE\n */\n\nimport { useEffect, useState } from 'react';\n\nexport function useScreenWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handler = (event) => {\n      setWidth(event.target.innerWidth);\n    };\n\n    window.addEventListener('resize', handler);\n\n    return () => {\n      window.removeEventListener('resize', handler);\n    };\n  }, []);\n\n  return width;\n}\n"],"names":["compose","connect","state","ownProps","dashboardExample","dispatch","setMeta","payload","Component","request","options","Promise","resolve","reject","error","this","props","screenWidth","authenticate","React","withRouter","width","setWidth","useState","window","innerWidth","useEffect","handler","event","target","addEventListener","removeEventListener","style","textAlign","background","onClick","history","push","mAppUrlPrefix","disabled","EventService","data","text","noButtons","component","TypicalPopup","events","onClickNo","dAppUrlPrefix"],"sourceRoot":""}